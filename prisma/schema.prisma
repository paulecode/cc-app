// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id          Int          @unique @default(autoincrement())
  username    String       @unique
  password    String
  midiResults MidiResult[]
  wavResults  WavResult[]
}

model MidiResult {
  id                 Int     @id @default(autoincrement())
  filename           String
  classifiedComposer String?
  classifiedGenre    String?
  chords             Chord[]
  User               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
  processed          Boolean @default(false)

  @@unique([userId, filename])
  @@map("MidiResult")
}

model Chord {
  id           Int        @id @default(autoincrement())
  name         String
  time         Int
  notes        String[]
  root         String
  MidiResult   MidiResult @relation(fields: [midiResultId], references: [id], onDelete: Cascade)
  midiResultId Int
}

model WavResult {
  id                 Int     @id @default(autoincrement())
  filename           String
  classifiedComposer String?
  classifiedGenre    String?
  rms                Float[]
  User               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
  processed          Boolean @default(false)

  @@unique([userId, filename])
}
